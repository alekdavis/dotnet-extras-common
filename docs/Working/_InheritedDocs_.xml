<doc>
  <assembly>
    <name>_InheritedDocs_</name>
  </assembly>
  <members>
  <member name="M:DotNetExtras.Common.Exceptions.SafeException.#ctor">
  
<summary>
            Initializes a new instance of the <see cref="T:DotNetExtras.Common.Exceptions.SafeException" /> class.
            </summary><param name="message">
            Error message.
            </param><param name="innerException">
            Inner exception.
            </param></member><member name="M:DotNetExtras.Common.Exceptions.SafeException.#ctor(System.String)">
  
<summary>
            Initializes a new instance of the <see cref="T:DotNetExtras.Common.Exceptions.SafeException" /> class.
            </summary><param name="message">
            Error message.
            </param><param name="innerException">
            Inner exception.
            </param></member><member name="M:DotNetExtras.Common.Extensions.ObjectExtensions.Clone(System.Object)">
  
  <summary>
            Returns a deep copy of an object (requires type casting).
            </summary>
  <example>
    <code>
            MyObject? cloneObject = (MyObject?)originalObject.Clone();
            </code>
  </example>
<param name="original">
            Original object.
            </param><returns>
            Cloned object.
            </returns><remarks>
            Adapted from 
            <see href="https://github.com/Burtsev-Alexey/net-object-deep-copy/blob/master/ObjectExtensions.cs" />.
            </remarks></member><member name="M:DotNetExtras.Common.NameOf.Long(System.Object,System.Boolean,System.String)">
  
  <summary>
            Returns the partial name of the object, class, type, or property
            omitting the entry before the first period (counting from left to right).
            </summary>
  <returns>
            Name without the first (left) compound prefix.
            </returns>
  <remarks>
            If the name does not include any compound parts, it will be returned as-is.
            </remarks>
  <example>
    <code>
            // PRINT: Parent.ChildProp
            Console.WriteLine(NameOf.Long(nameof(Class.Parent.ChildProp)));
            
            // PRINT: parent.childProp
            Console.WriteLine(NameOf.Long(nameof(Class.Parent.ChildProp), true));
            
            // PRINT: Parent.ChildProp
            Console.WriteLine(NameOf.Long(myObject?.Parent?.ChildProp));
            
            // PRINT: parent.childProp
            Console.WriteLine(NameOf.Long(myObject?.Parent?.ChildProp, true));
            </code>
  </example>
<param name="caller">
            Object, class, type, or property.
            </param><param name="camelCase">
            Indicates whether to return the name in <c>camelCase</c>.
            </param><param name="name">
            Must be omitted.
            </param></member><member name="M:DotNetExtras.Common.NameOf.Short(System.Object,System.Boolean,System.String)">
  
  <summary>
            Returns the short name of the immediate object property (same as nameof()).
            </summary>
  <returns>
            Short (immediate) name (without compound prefix).
            </returns>
  <example>
    <code>
            // PRINT: ChildProp
            Console.WriteLine(NameOf.Short(nameof(Class.Parent.ChildProp)));
            
            // PRINT: childProp
            Console.WriteLine(NameOf.Short(nameof(Class.Parent.ChildProp), true));
            
            // PRINT: ChildProp
            Console.WriteLine(NameOf.Short(myObject?.Parent?.ChildProp));
            
            // PRINT: childProp
            Console.WriteLine(NameOf.Short(myObject?.Parent?.ChildProp, true));
            </code>
  </example>
<param name="caller">
            Object, class, type, or property.
            </param><param name="camelCase">
            Indicates whether to return the name in <c>camelCase</c>.
            </param><param name="name">
            Must be omitted.
            </param></member><member name="M:DotNetExtras.Common.NameOf.Skip(System.Object,System.Int32,System.Boolean,System.String)">
  
  <summary>
            Returns a shortened name of the object, class, type, or property
            after removing the specified number of compound prefixes or suffixes.
            </summary>
  <param name="caller">
            Full or partial property name (can also be referenced using <c>nameof</c>).
            </param>
  <param name="count">
            Number of parts to be excluded from the result.
            A positive number indicates skipping from the left,
            a negative number indicates skipping from the right.
            If the skipped number is bigger than the number of parts,
            an empty string will be returned.
            </param>
  <param name="camelCase">
            If true, parameter names will be converted to <c>camelCase</c>.
            </param>
  <param name="name">
            Must be omitted.
            </param>
  <returns>
            Shortened name.
            </returns>
  <example>
    <code>
            // PRINT: Parent.ChildProp
            Console.WriteLine(NameOf.Skip(nameof(Class.Parent.ChildProp), 1));
            
            // PRINT: Class.Parent
            Console.WriteLine(NameOf.Skip(nameof(Class.Parent.ChildProp), -1));
            
            // PRINT: childProp
            Console.WriteLine(NameOf.Skip(nameof(Class.Parent.ChildProp), 2, true));
            
            // PRINT: class
            Console.WriteLine(NameOf.Skip(nameof(Class.Parent.ChildProp), -2, true));
            
            // PRINT: Parent.ChildProp
            Console.WriteLine(NameOf.Skip(object.Parent?.ChildProp), 1);
            
            // PRINT: object.Parent
            Console.WriteLine(NameOf.Skip(object.Parent?.ChildProp), -1);
            
            // PRINT: childProp
            Console.WriteLine(NameOf.Skip(object.Parent?.ChildProp, 2, true));
            
            // PRINT: object
            Console.WriteLine(NameOf.Skip(object.Parent?.ChildProp, -2, true));
            </code>
  </example>
</member><member name="M:DotNetExtras.Common.NameOf.Keep(System.Object,System.Int32,System.Boolean,System.String)">
  
  <summary>
            Returns a shortened name of the object, class, type, or property
            keeping the specified number of compound prefixes or suffixes.
            </summary>
  <param name="caller">
            Full or partial property name (can also be referenced using <c>nameof</c>).
            </param>
  <param name="count">
            Number of parts to be included in the result.
            A positive number indicates including from the left,
            a negative number indicates including from the right.
            If the kept number is bigger than the number of parts,
            an empty string will be returned.
            </param>
  <param name="camelCase">
            If true, parameter names will be converted to <c>camelCase</c>.
            </param>
  <param name="name">
            Must be omitted.
            </param>
  <returns>
            Shortened name.
            </returns>
  <example>
    <code>
            // PRINT: Class
            Console.WriteLine(NameOf.Keep(nameof(Class.Parent.ChildProp), 1));
            
            // PRINT: ChildProp
            Console.WriteLine(NameOf.Keep(nameof(Class.Parent.ChildProp), -1));
            
            // PRINT: class.parent
            Console.WriteLine(NameOf.Keep(nameof(Class.Parent.ChildProp), 2, true));
            
            // PRINT: parent.childProp
            Console.WriteLine(NameOf.Keep(nameof(Class.Parent.ChildProp), -2, true));
            
            // PRINT: object
            Console.WriteLine(NameOf.Keep(object.Parent?.ChildProp), 1);
            
            // PRINT: ChildProp
            Console.WriteLine(NameOf.Keep(object.Parent?.ChildProp), -1);
            
            // PRINT: object.parent
            Console.WriteLine(NameOf.Keep(object.Parent?.ChildProp, 2, true));
            
            // PRINT: parent.childProp
            Console.WriteLine(NameOf.Keep(object.Parent?.ChildProp, -2, true));
            </code>
  </example>
</member></members>
</doc>